package com.malmungchi.feature.study.second

import android.util.Log
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.itemsIndexed
import androidx.compose.foundation.lazy.rememberLazyListState
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.BasicTextField
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.focus.FocusRequester
import androidx.compose.ui.focus.focusRequester
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.SolidColor
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import com.malmungchi.feature.study.Pretendard
import com.malmungchi.feature.study.R
import com.malmungchi.feature.study.StudyReadingViewModel



// ‚úÖ ProgressBar (2Îã®Í≥ÑÍπåÏßÄ ÌååÎûÄÏÉâ)
@Composable
fun StepProgressBarPreview(totalSteps: Int = 3, currentStep: Int = 2) {
    Row(
        Modifier.fillMaxWidth().padding(horizontal = 4.dp),
        horizontalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        repeat(totalSteps) { index ->
            Box(
                modifier = Modifier.weight(1f).height(14.dp).background(
                    color = if (index < currentStep) Color(0xFF195FCF) else Color(0xFFF2F2F2),
                    shape = RoundedCornerShape(50)
                )
            )
        }
    }
}

// ‚úÖ ÏûÖÎ†•Îêú Î∂ÄÎ∂ÑÎßå Í≤ÄÏ†ïÏÉâ, ÎÇòÎ®∏ÏßÄ ÌöåÏÉâ
@Composable
fun TypingTextOverlay(original: String, typed: String) {
    val annotated = buildAnnotatedString {
        val matchCount = typed.zip(original).takeWhile { (t, o) -> t == o }.count()
        append(AnnotatedString(original.take(matchCount), SpanStyle(color = Color.Black)))
        append(AnnotatedString(original.drop(matchCount), SpanStyle(color = Color(0xFF989898))))
    }
    Text(
        annotated,
        fontSize = 16.sp,
        fontFamily = Pretendard,
        lineHeight = 26.sp
    )
}

@Composable
fun TypingText(original: String, typed: String) {
    val annotated: AnnotatedString = buildAnnotatedString {
        var matchIndex = 0
        for (i in typed.indices) {
            if (i < original.length && typed[i] == original[i]) {
                matchIndex++
            } else break
        }
        append(AnnotatedString(original.take(matchIndex), spanStyle = SpanStyle(color = Color.Black)))
        append(AnnotatedString(original.drop(matchIndex), spanStyle = SpanStyle(color = Color(0xFF989898))))
    }
    Text(annotated, fontSize = 16.sp, fontFamily = Pretendard, lineHeight = 24.sp)
}

// ‚úÖ ÏÉÅÎã®Î∞î
@Composable
fun TopBar(title: String, onBackClick: () -> Unit) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        verticalAlignment = Alignment.CenterVertically
    ) {
        IconButton(onClick = onBackClick) {
            Icon(
                painter = painterResource(id = R.drawable.btn_img_back),
                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
                tint = Color.Unspecified
            )
        }
        Text(
            text = title,
            fontSize = 20.sp,
            fontFamily = Pretendard,
            fontWeight = FontWeight.SemiBold,
            textAlign = TextAlign.Center,
            modifier = Modifier.weight(1f),
            color = Color.Black
        )
        Spacer(Modifier.width(48.dp))
    }
}

// ‚úÖ ÌïòÎã® Î≤ÑÌäº
@Composable
fun BottomNavigationButtons(onBackClick: () -> Unit, onNextClick: () -> Unit) {
    Row(
        Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        OutlinedButton(
            onClick = onBackClick,
            shape = RoundedCornerShape(50),
            colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF195FCF)),
            modifier = Modifier.height(42.dp).width(160.dp)
        ) {
            Text("Ïù¥Ï†Ñ Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard)
        }

        Button(
            onClick = onNextClick,
            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF195FCF)),
            shape = RoundedCornerShape(50),
            modifier = Modifier.height(42.dp).width(160.dp)
        ) {
            Text("Îã§Ïùå Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard, color = Color.White)
        }
    }
}
/**
 * ‚úÖ 2Îã®Í≥Ñ ÌïÑÏÇ¨ ÌôîÎ©¥ (Í∏∞Ï°¥ UI Í∑∏ÎåÄÎ°ú, ÌïÑÏÇ¨ ÏûÖÎ†• Î∂ÄÎ∂ÑÎßå ÏàòÏ†ï)
 */
@Composable
fun StudySecondScreen(
    token: String,
    viewModel: StudyReadingViewModel = hiltViewModel(),
    onBackClick: () -> Unit = {},
    onNextClick: () -> Unit = {}
) {
    val sentences by viewModel.sentences.collectAsState()
    val currentIndex by viewModel.currentIndex.collectAsState()
    val savedInputs = remember { mutableStateMapOf<Int, String>() }
    val listState = rememberLazyListState()
    var showAlert by remember { mutableStateOf(false) } // ‚úÖ Alert ÏÉÅÌÉú Ï∂îÍ∞Ä

    val focusRequesters = remember { mutableStateListOf<FocusRequester>() }

    // ‚úÖ focusRequesters ÌÅ¨Í∏∞Î•º sentences ÏàòÏôÄ ÎßûÏ∂§
    if (focusRequesters.size < sentences.size) {
        repeat(sentences.size - focusRequesters.size) {
            focusRequesters.add(FocusRequester())
        }
    }

    // ‚úÖ ÏµúÏ¥à ÏßÑÏûÖ Ïãú ÏÑúÎ≤Ñ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Î∞è UI ÎèôÍ∏∞Ìôî
    LaunchedEffect(Unit) {
        viewModel.initHandwritingStudy(token)
        viewModel.fetchHandwriting(token) { loaded ->
            savedInputs.clear()
            savedInputs.putAll(loaded)
        }
    }

    // ‚úÖ ÌòÑÏû¨ Î¨∏Ïû•ÏúºÎ°ú Ïä§ÌÅ¨Î°§ Î∞è Ìè¨Ïª§Ïä§ Ïù¥Îèô
    LaunchedEffect(currentIndex) {
        listState.animateScrollToItem(index = currentIndex, scrollOffset = -20)
        focusRequesters.getOrNull(currentIndex)?.requestFocus()
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(16.dp)
    ) {
        TopBar(title = "Ïò§ÎäòÏùò ÌïôÏäµ", onBackClick = onBackClick)

        Spacer(Modifier.height(24.dp))
        Text("ÌïôÏäµ ÏßÑÌñâÎ•†", fontSize = 16.sp, color = Color.Black, modifier = Modifier.padding(start = 8.dp))
        Spacer(Modifier.height(16.dp))
        StepProgressBarPreview(totalSteps = 3, currentStep = 2)
        Spacer(Modifier.height(24.dp))

        // ‚úÖ LazyColumnÏúºÎ°ú Î¨∏Ïû•Î≥Ñ ÏûÖÎ†• Ïπ¥Îìú ÌëúÏãú
        LazyColumn(
            state = listState,
            modifier = Modifier.weight(1f),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            itemsIndexed(sentences) { index, sentence ->
                val isEnabled = index <= currentIndex

                // üî• ÏûÖÎ†•Ïù¥ ÏôÑÏÑ±ÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú Îã§Ïùå Î¨∏Ïû•ÏúºÎ°ú Ïù¥Îèô
                LaunchedEffect(savedInputs[index]) {
                    val input = savedInputs[index]?.trim() ?: ""
                    if (isEnabled && input.equals(sentence.trim(), ignoreCase = true) && index == currentIndex) {
                        viewModel.saveAllInputs(savedInputs.toMap())
                        if (currentIndex < sentences.size - 1) {
                            viewModel.nextSentence()
                        }
                    }
                }

                Surface(
                    shape = RoundedCornerShape(12.dp),
                    shadowElevation = 4.dp,
                    color = Color.White,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Column(Modifier.padding(16.dp)) {
                        Text(
                            text = sentence,
                            fontSize = 16.sp,
                            fontFamily = Pretendard,
                            color = Color(0xFF444444),
                            lineHeight = 24.sp
                        )
                        Spacer(Modifier.height(8.dp))
                        TextField(
                            value = savedInputs[index] ?: viewModel.getInputFor(index),
                            onValueChange = { savedInputs[index] = it },
                            modifier = Modifier
                                .fillMaxWidth()
                                .focusRequester(focusRequesters.getOrNull(index) ?: FocusRequester()),
                            enabled = isEnabled,
                            colors = TextFieldDefaults.colors(
                                focusedContainerColor = Color(0xFFF9F9F9),
                                unfocusedContainerColor = Color(0xFFF9F9F9),
                                disabledContainerColor = Color(0xFFEFEFEF)
                            )
                        )
                    }
                }
            }
        }

        Spacer(Modifier.height(16.dp))

        // ‚úÖ ÌïòÎã® Î≤ÑÌäº
        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
            OutlinedButton(
                onClick = { if (currentIndex > 0) viewModel.previousSentence() },
                shape = RoundedCornerShape(50),
                colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF195FCF)),
                modifier = Modifier.height(42.dp).width(160.dp)
            ) {
                Text("Ïù¥Ï†Ñ Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard)
            }

            Button(
                onClick = {
                    viewModel.saveAllInputs(savedInputs.toMap())
                    if (currentIndex < sentences.size - 1) {
                        // ‚úÖ ÏïÑÏßÅ ÌïÑÏÇ¨Í∞Ä ÏôÑÎ£åÎêòÏßÄ ÏïäÏúºÎ©¥ Alert ÎùÑÏõÄ
                        showAlert = true
                    } else {
                        // ‚úÖ Ï†ÑÎ∂Ä ÏôÑÎ£å ‚Üí Îã§Ïùå Îã®Í≥Ñ
                        viewModel.finalizeHandwriting(token, onNextClick)
                    }
                },
                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF195FCF)),
                shape = RoundedCornerShape(50),
                modifier = Modifier.height(42.dp).width(160.dp)
            ) {
                Text("Îã§Ïùå Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard, color = Color.White)
            }
        }
    }

    // ‚úÖ Alert Ïó∞Í≤∞
    if (showAlert) {
        SkipHandwritingAlert.Show(
            onConfirm = {
                showAlert = false
                onNextClick() // üëâ "ÎÑ§" ‚Üí Î©îÏù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
            },
            onDismiss = {
                showAlert = false
                // üëâ "ÏïÑÎãàÏöî" ‚Üí AlertÎßå Îã´Í≥† ÌïÑÏÇ¨ ÌôîÎ©¥ Ïú†ÏßÄ
            }
        )
    }
}
//@Composable
//fun StudySecondScreen(
//    token: String,
//    viewModel: StudyReadingViewModel = hiltViewModel(),
//    onBackClick: () -> Unit = {},
//    onNextClick: () -> Unit = {}
//) {
//    val sentences by viewModel.sentences.collectAsState()
//    val currentIndex by viewModel.currentIndex.collectAsState()
//    val savedInputs = remember { mutableStateMapOf<Int, String>() }
//    val listState = rememberLazyListState()
//
//    val focusRequesters = remember { mutableStateListOf<FocusRequester>() }
//
//    // ‚úÖ focusRequesters ÌÅ¨Í∏∞Î•º sentences ÏàòÏôÄ ÎßûÏ∂§
//    if (focusRequesters.size < sentences.size) {
//        repeat(sentences.size - focusRequesters.size) {
//            focusRequesters.add(FocusRequester())
//        }
//    }
//
//    // ‚úÖ ÌôîÎ©¥ ÏßÑÏûÖ Ïãú Î¨∏Ïû• Ï¥àÍ∏∞Ìôî Ìò∏Ï∂ú
//    LaunchedEffect(Unit) {
//        viewModel.initHandwritingStudy(token)
//        // ‚úÖ ÏÑúÎ≤ÑÏóêÏÑú Í∏∞Ï°¥ ÌïÑÏÇ¨ ÎÇ¥Ïö©ÏùÑ Í∞ÄÏ†∏Ïò§Î©¥ UIÏùò savedInputsÎèÑ ÎèôÍ∏∞Ìôî
//        viewModel.fetchHandwriting(token) { loaded ->
//            savedInputs.clear()
//            savedInputs.putAll(loaded)
//        }
//    }
//
//
//    // ‚úÖ API Ìò∏Ï∂ú Ïú†ÏßÄ
//    LaunchedEffect(currentIndex) {
//        listState.animateScrollToItem(index = currentIndex, scrollOffset = -20)
//        focusRequesters.getOrNull(currentIndex)?.requestFocus() // ‚úÖ ÏûêÎèô Ìè¨Ïª§Ïä§ Ï∂îÍ∞Ä
//    }
//
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .background(Color.White)
//            .padding(16.dp)
//    ) {
//        TopBar(title = "Ïò§ÎäòÏùò ÌïôÏäµ", onBackClick = onBackClick)
//
//        Spacer(Modifier.height(24.dp))
//        Text("ÌïôÏäµ ÏßÑÌñâÎ•†", fontSize = 16.sp, color = Color.Black, modifier = Modifier.padding(start = 8.dp))
//        Spacer(Modifier.height(16.dp))
//        StepProgressBarPreview(totalSteps = 3, currentStep = 2)
//        Spacer(Modifier.height(24.dp))
//
//        // ‚úÖ LazyColumnÏúºÎ°ú Î¨∏Ïû•Î≥Ñ ÏûÖÎ†• Ïπ¥Îìú ÌëúÏãú
//        LazyColumn(
//            state = listState,
//            modifier = Modifier.weight(1f),
//            verticalArrangement = Arrangement.spacedBy(12.dp)
//        ) {
//            itemsIndexed(sentences) { index, sentence ->
//                val isEnabled = index <= currentIndex
//
//                // üî• ÏûÖÎ†•Ïù¥ ÏôÑÏÑ±ÎêòÎ©¥ ÏûêÎèôÏúºÎ°ú Îã§Ïùå Î¨∏Ïû•ÏúºÎ°ú Ïù¥Îèô
//                LaunchedEffect(savedInputs[index]) {
//                    val input = savedInputs[index]?.trim() ?: ""
//                    if (isEnabled && input.trim() == sentence.trim() && index == currentIndex) {
//                        // ‚úÖ ÌòÑÏû¨ Î¨∏Ïû•ÏùÑ Îã§ ÏûÖÎ†•Ìïú Í≤ΩÏö∞ ‚Üí ÏûêÎèô Îã§Ïùå Î¨∏Ïû• Ïù¥Îèô
//                        viewModel.saveAllInputs(savedInputs.toMap())
//                        if (currentIndex < sentences.size - 1) {
//                            viewModel.nextSentence()
//                        }
//                    }
//                }
//
//                Surface(
//                    shape = RoundedCornerShape(12.dp),
//                    shadowElevation = 4.dp,
//                    color = Color.White,
//                    modifier = Modifier.fillMaxWidth()
//                ) {
//                    Column(Modifier.padding(16.dp)) {
//                        Text(
//                            text = sentence,
//                            fontSize = 16.sp,
//                            fontFamily = Pretendard,
//                            color = Color(0xFF444444),
//                            lineHeight = 24.sp
//                        )
//                        Spacer(Modifier.height(8.dp))
//                        TextField(
//                            value = savedInputs[index] ?: viewModel.getInputFor(index),
//                            onValueChange = { savedInputs[index] = it },
//                            modifier = Modifier
//                                .fillMaxWidth()
//                                .focusRequester(focusRequesters[index]),
//                            enabled = isEnabled,
//                            colors = TextFieldDefaults.colors(
//                                focusedContainerColor = Color(0xFFF9F9F9),
//                                unfocusedContainerColor = Color(0xFFF9F9F9),
//                                disabledContainerColor = Color(0xFFEFEFEF)
//                            )
//                        )
//                    }
//                }
//            }
//        }
//
//        Spacer(Modifier.height(16.dp))
//
//        // ‚úÖ Í∏∞Ï°¥ Î≤ÑÌäº Ïú†ÏßÄ + ÎèôÏûëÎßå Î≥ÄÍ≤Ω
//        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
//            OutlinedButton(
//                onClick = {
//                    if (currentIndex > 0) viewModel.previousSentence()
//                },
//                shape = RoundedCornerShape(50),
//                colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF195FCF)),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) {
//                Text("Ïù¥Ï†Ñ Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard)
//            }
//
//            Button(
//                onClick = {
//                    viewModel.saveAllInputs(savedInputs.toMap()) // üî• ÌòÑÏû¨ ÏûÖÎ†• Ï†ÄÏû•
//                    if (currentIndex == sentences.size - 1) {
//                        viewModel.finalizeHandwriting(token, onNextClick)
//                    } else {
//                        viewModel.nextSentence()
//                    }
//                },
//                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF195FCF)),
//                shape = RoundedCornerShape(50),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) {
//                Text("Îã§Ïùå Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard, color = Color.White)
//            }
//        }
//    }
//}
//@Composable
//fun StudySecondScreen(
//    token: String,
//    viewModel: StudyReadingViewModel = hiltViewModel(),
//    onBackClick: () -> Unit = {},
//    onNextClick: () -> Unit = {}
//) {
//    // üî• Í∏∞Ï°¥ quote ÎåÄÏã† Î¨∏Ïû• Î¶¨Ïä§Ìä∏ StateFlow ÏÇ¨Ïö©
//    // üî• Í∏∞Ï°¥ userInputÏùÄ ÌòÑÏû¨ Î¨∏Ïû• ÏûÖÎ†•Í∞íÏúºÎ°úÎßå ÏÇ¨Ïö©
//    val sentences by viewModel.sentences.collectAsState()   // üî• Ï∂îÍ∞Ä
//    val currentIndex by viewModel.currentIndex.collectAsState() // üî• Ï∂îÍ∞Ä
//    val userInput by viewModel.userInput.collectAsState()
//
//    val currentSentence = sentences.getOrNull(currentIndex) ?: "" // üî• ÌòÑÏû¨ Î¨∏Ïû• Ï∂îÏ∂ú
//
//    // ‚úÖ Í∏∞Ï°¥ API Ìò∏Ï∂ú Ïú†ÏßÄ
//    LaunchedEffect(Unit) {
//        viewModel.fetchTodayQuote(token)
//        viewModel.fetchHandwriting(token)
//    }
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .background(Color.White)
//            .padding(16.dp)
//    ) {
//        TopBar(title = "Ïò§ÎäòÏùò ÌïôÏäµ", onBackClick = onBackClick)
//
//        Spacer(Modifier.height(24.dp))
//        Text("ÌïôÏäµ ÏßÑÌñâÎ•†", fontSize = 16.sp, color = Color.Black, modifier = Modifier.padding(start = 8.dp))
//        Spacer(Modifier.height(16.dp))
//        StepProgressBarPreview(totalSteps = 3, currentStep = 2)
//        Spacer(Modifier.height(24.dp))
//
//        // üî• Í∏∞Ï°¥ Surface Ïú†ÏßÄ but Í∑∏Î¶ºÏûê(shadowElevation) + Î¨∏Ïû•Î≥Ñ ÌïÑÏÇ¨ Î°úÏßÅÏúºÎ°ú Î≥ÄÍ≤Ω
//        Surface(
//            shape = RoundedCornerShape(12.dp),
//            shadowElevation = 4.dp, // üî• Í∑∏Î¶ºÏûê Ï∂îÍ∞Ä
//            color = Color.White,
//            modifier = Modifier.weight(1f)
//        ) {
//            Column(
//                modifier = Modifier.fillMaxSize().padding(20.dp),
//                verticalArrangement = Arrangement.Top
//            ) {
//                // üî• Í∏∞Ï°¥ TypingTextOverlay ‚Üí ÌòÑÏû¨ Î¨∏Ïû• Îã®Ïàú ÌëúÏãú
//                Text(
//                    text = currentSentence,
//                    fontSize = 16.sp,
//                    fontFamily = Pretendard,
//                    color = Color(0xFF444444),
//                    lineHeight = 26.sp
//                )
//
//                Spacer(Modifier.height(16.dp))
//
//                // üî• Í∏∞Ï°¥ BasicTextField Ï†úÍ±∞ ‚Üí TextFieldÎ°ú Î≥ÄÍ≤Ω
//                // üî• userInput ‚Üí ÌòÑÏû¨ Î¨∏Ïû• ÏûÖÎ†• StateFlow Ïó∞Í≤∞
//                TextField(
//                    value = userInput,
//                    onValueChange = { viewModel.onUserInputChange(it) },
//                    modifier = Modifier.fillMaxWidth(),
//                    colors = TextFieldDefaults.colors( // ‚úÖ Material3 Î∞©Ïãù
//                        focusedContainerColor = Color(0xFFF9F9F9),
//                        unfocusedContainerColor = Color(0xFFF9F9F9)
//                    )
//                )
//            }
//        }
//
//        Spacer(Modifier.height(16.dp))
//
//        // üî• Î≤ÑÌäº ÌÅ¥Î¶≠ Ïãú Îã§Ïùå Î¨∏Ïû• Ïù¥Îèô Î°úÏßÅ Ï∂îÍ∞Ä
//        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
//            OutlinedButton(
//                onClick = { viewModel.previousSentence() }, // üî• Í∏∞Ï°¥ onBackClick ‚Üí Ïù¥Ï†Ñ Î¨∏Ïû• Ïù¥Îèô
//                shape = RoundedCornerShape(50),
//                colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF195FCF)),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) {
//                Text("Ïù¥Ï†Ñ Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard)
//            }
//
//            Button(
//                onClick = {
//                    viewModel.saveCurrentInput() // ‚úÖ token Ï†úÍ±∞ (ViewModel Ìï®ÏàòÏôÄ ÎßûÏ∂§)
//                    if (currentIndex == sentences.size - 1) {
//                        viewModel.finalizeHandwriting(token, onNextClick)
//                    } else {
//                        viewModel.nextSentence()
//                    }
//                },
//                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF195FCF)),
//                shape = RoundedCornerShape(50),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) {
//                Text("Îã§Ïùå Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard, color = Color.White)
//            }
//        }
//    }
//}

///**
// * ‚úÖ 2Îã®Í≥Ñ ÌïÑÏÇ¨ ÌôîÎ©¥
// */
//@Composable
//fun StudySecondScreen(
//    token: String,
//    viewModel: StudyReadingViewModel = hiltViewModel(),
//    onBackClick: () -> Unit = {},
//    onNextClick: () -> Unit = {}
//) {
//    val quote by viewModel.quote.collectAsState()
//    val userInput by viewModel.userInput.collectAsState()
//
//    // ‚úÖ ÏßÑÏûÖ Ïãú API Ìò∏Ï∂ú
//    LaunchedEffect(Unit) {
//        viewModel.fetchTodayQuote(token)
//        viewModel.fetchHandwriting(token)
//    }
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .background(Color.White)
//            .padding(16.dp)
//    ) {
//        TopBar(title = "Ïò§ÎäòÏùò ÌïôÏäµ", onBackClick = onBackClick)
//
//        Spacer(Modifier.height(24.dp))
//        Text("ÌïôÏäµ ÏßÑÌñâÎ•†", fontSize = 16.sp, color = Color.Black, modifier = Modifier.padding(start = 8.dp))
//        Spacer(Modifier.height(16.dp))
//        StepProgressBarPreview(totalSteps = 3, currentStep = 2)
//        Spacer(Modifier.height(24.dp))
//
//        Surface(shape = RoundedCornerShape(12.dp), color = Color(0xFFF9F9F9), modifier = Modifier.weight(1f)) {
//            Box(modifier = Modifier.fillMaxSize().padding(20.dp)) {
//                TypingTextOverlay(original = quote, typed = userInput)
//
//                BasicTextField(
//                    value = userInput,
//                    onValueChange = { newValue ->
//                        if (newValue.length <= quote.length) {
//                            viewModel.onUserInputChange(newValue)
//                        }
//                    },
//                    textStyle = LocalTextStyle.current.copy(color = Color.Transparent),
//                    cursorBrush = SolidColor(Color.Transparent),
//                    modifier = Modifier.matchParentSize()
//                )
//            }
//        }
//
//        Spacer(Modifier.height(16.dp))
//        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
//            OutlinedButton(
//                onClick = onBackClick,
//                shape = RoundedCornerShape(50),
//                colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF195FCF)),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) {
//                Text("Ïù¥Ï†Ñ Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard)
//            }
//
//            Button(
//                onClick = {
//                    viewModel.saveHandwriting(
//                        token,
//                        onSuccess = { onNextClick() },
//                        onFailure = { e -> Log.e("HANDWRITING", "Ï†ÄÏû• Ïã§Ìå®: ${e.message}") }
//                    )
//                },
//                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF195FCF)),
//                shape = RoundedCornerShape(50),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) {
//                Text("Îã§Ïùå Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard, color = Color.White)
//            }
//        }
//    }
//}

// ‚úÖ PreviewÏö© ViewModel Stub
class StudySecondPreviewViewModel {
    private val _quote = mutableStateOf("ÏÇ¨Í≥ºÎã§. Ïù¥ Î¨∏Ïû•ÏùÑ ÌïÑÏÇ¨Ìï¥ Î≥¥ÏÑ∏Ïöî.")
    val quote: State<String> get() = _quote

    private val _userInput = mutableStateOf("ÏÇ¨")
    val userInput: State<String> get() = _userInput

    fun onUserInputChange(newInput: String) {
        _userInput.value = newInput
    }
}

open class StudySecondViewModelStub(private val previewVM: StudySecondPreviewViewModel) {
    val quote: State<String> get() = previewVM.quote
    val userInput: State<String> get() = previewVM.userInput
    fun onUserInputChange(newInput: String) = previewVM.onUserInputChange(newInput)
}

/**
 * ‚úÖ Preview
 */
@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
@Composable
fun PreviewStudySecondScreen() {
    val fakeQuote = "ÏÇ¨Í≥ºÎã§. Ïù¥ Î¨∏Ïû•ÏùÑ ÌïÑÏÇ¨Ìï¥ Î≥¥ÏÑ∏Ïöî."
    val fakeInput = remember { mutableStateOf("ÏÇ¨") }

    Column(
        Modifier.fillMaxSize().background(Color.White).padding(16.dp)
    ) {
        TopBar(title = "Ïò§ÎäòÏùò ÌïôÏäµ", onBackClick = {})

        Spacer(Modifier.height(24.dp))
        Text("ÌïôÏäµ ÏßÑÌñâÎ•†", fontSize = 16.sp, color = Color.Black, modifier = Modifier.padding(start = 8.dp))
        Spacer(Modifier.height(16.dp))
        StepProgressBarPreview(totalSteps = 3, currentStep = 2)
        Spacer(Modifier.height(24.dp))

        Surface(shape = RoundedCornerShape(12.dp), color = Color(0xFFF9F9F9), modifier = Modifier.weight(1f)) {
            Box(Modifier.fillMaxSize().padding(20.dp)) {
                TypingTextOverlay(original = fakeQuote, typed = fakeInput.value)
                BasicTextField(
                    value = fakeInput.value,
                    onValueChange = { newValue -> if (newValue.length <= fakeQuote.length) fakeInput.value = newValue },
                    textStyle = LocalTextStyle.current.copy(color = Color.Transparent),
                    cursorBrush = SolidColor(Color.Transparent),
                    modifier = Modifier.matchParentSize()
                )
            }
        }

        Spacer(Modifier.height(16.dp))
        BottomNavigationButtons(onBackClick = {}, onNextClick = {})
    }
}

//
///**
// * ‚úÖ 2Îã®Í≥Ñ ÌïÑÏÇ¨ ÌôîÎ©¥
// */
//@Composable
//fun StudySecondScreen(
//    token: String,
//    viewModel: StudyReadingViewModel = hiltViewModel(),   // ‚úÖ Ïã§Ï†ú Ïï±ÏóêÏÑúÎäî Hilt ViewModel ÏÇ¨Ïö©
//    onBackClick: () -> Unit = {},
//    onNextClick: () -> Unit = {}
//) {
//    val quote by viewModel.quote.collectAsState()
//    val userInput by viewModel.userInput.collectAsState()
//
//    // ‚úÖ ÌôîÎ©¥ ÏßÑÏûÖ Ïãú ÏÑúÎ≤ÑÏóêÏÑú Í∏∞Ï°¥ ÌïÑÏÇ¨ ÎÇ¥Ïö© Î°úÎìú
//    LaunchedEffect(Unit) {
//        viewModel.fetchTodayQuote(token)       // Í∏ÄÍ∞ê Î∂àÎü¨Ïò§Í∏∞
//        viewModel.fetchHandwriting(token)      // üîπ Í∏∞Ï°¥ ÌïÑÏÇ¨ ÎÇ¥Ïö© Î∂àÎü¨Ïò§Í∏∞
//    }
//
//
//
//    Column(
//        modifier = Modifier
//            .fillMaxSize()
//            .background(Color.White)
//            .padding(16.dp)
//    ) {
//        /** üîπ ÏÉÅÎã® Î∞î (Ïò§ÎäòÏùò ÌïôÏäµ) */
//        Row(modifier = Modifier.fillMaxWidth(), verticalAlignment = Alignment.CenterVertically) {
//            IconButton(onClick = onBackClick) {
//                Icon(
//                    painter = painterResource(id = R.drawable.btn_img_back),
//                    contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
//                    tint = Color.Unspecified
//                )
//            }
//            Text(
//                text = "Ïò§ÎäòÏùò ÌïôÏäµ",
//                fontSize = 20.sp,
//                fontFamily = Pretendard,
//                fontWeight = FontWeight.SemiBold,
//                textAlign = TextAlign.Center,
//                modifier = Modifier.weight(1f),
//                color = Color.Black
//            )
//            Spacer(Modifier.width(48.dp))
//        }
//
//        Spacer(Modifier.height(24.dp))
//
//        /** üîπ ÌïôÏäµ ÏßÑÌñâÎ•† */
//        Text(
//            "ÌïôÏäµ ÏßÑÌñâÎ•†",
//            fontSize = 16.sp,
//            color = Color.Black,
//            fontWeight = FontWeight.Normal,
//            modifier = Modifier.padding(start = 8.dp)
//        )
//        Spacer(Modifier.height(16.dp))   // ‚úÖ ÎèôÏùºÌïú Í∞ÑÍ≤© (ÌÖçÏä§Ìä∏ ‚Üí ÌîÑÎ°úÍ∑∏ÎûòÏä§Î∞î)
//        StepProgressBarPreview(totalSteps = 3, currentStep = 2)
//        Spacer(Modifier.height(24.dp))   // ‚úÖ ÎèôÏùºÌïú Í∞ÑÍ≤© (ÌîÑÎ°úÍ∑∏ÎûòÏä§Î∞î ‚Üí Îã§Ïùå UI)
//
//        /** üîπ ÌïÑÏÇ¨ ÏûÖÎ†• ÏòÅÏó≠ (Í∏ÄÍ∞ê ÏûêÏ≤¥Í∞Ä ÏûÖÎ†• UI) */
//        Surface(
//            shape = RoundedCornerShape(12.dp),
//            color = Color(0xFFF9F9F9),
//            modifier = Modifier.weight(1f)
//        ) {
//            Box(
//                modifier = Modifier
//                    .fillMaxSize()
//                    .padding(20.dp)
//            ) {
//                // ‚úÖ ÌöåÏÉâ+Í≤ÄÏ†ï Î≥ÄÌôòÎêòÎäî Î≥∏Î¨∏
//                TypingTextOverlay(original = quote, typed = userInput)
//
//                // ‚úÖ Ìà¨Î™Ö ÏûÖÎ†•Ï∞Ω (Ïã§Ï†ú ÏûÖÎ†•ÏùÄ Ïó¨Í∏∞ÏÑú)
//                BasicTextField(
//                    value = userInput,
//                    onValueChange = { newValue ->
//                        if (newValue.length <= quote.length) {
//                            viewModel.onUserInputChange(newValue) // ‚úÖ Ïó¨Í∏∞ ÏàòÏ†ïÎê®
//                        }
//                    },
//                    textStyle = LocalTextStyle.current.copy(color = Color.Transparent),
//                    cursorBrush = SolidColor(Color.Transparent), // Ïª§ÏÑúÎèÑ Ïà®ÍπÄ
//                    modifier = Modifier
//                        .matchParentSize() // Í∏Ä ÏúÑÏóê ÏôÑÏ†ÑÌûà ÎçÆÏùå
//                )
//            }
//        }
//
//        Spacer(Modifier.height(16.dp))
//        /** üîπ ÌïòÎã® Î≤ÑÌäº */
//        Row(Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {
//            OutlinedButton(
//                onClick = onBackClick,
//                shape = RoundedCornerShape(50),
//                colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF195FCF)),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) { Text("Ïù¥Ï†Ñ Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard) }
//
//            Button(
//                onClick = {
//                    viewModel.saveHandwriting(
//                        token,
//                        onSuccess = { onNextClick() },
//                        onFailure = { e -> Log.e("HANDWRITING", "Ï†ÄÏû• Ïã§Ìå®: ${e.message}") }
//                    )
//                },
//                colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF195FCF)),
//                shape = RoundedCornerShape(50),
//                modifier = Modifier.height(42.dp).width(160.dp)
//            ) {
//                Text("Îã§Ïùå Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard, color = Color.White)
//            }
//    }
//}
//@Composable
//fun TypingTextOverlay(original: String, typed: String) {
//    val annotated = buildAnnotatedString {
//        val matchCount = typed.zip(original).takeWhile { (t, o) -> t == o }.count()
//        append(AnnotatedString(original.take(matchCount), SpanStyle(color = Color.Black)))
//        append(AnnotatedString(original.drop(matchCount), SpanStyle(color = Color(0xFF989898))))
//    }
//    Text(
//        annotated,
//        fontSize = 16.sp,
//        fontFamily = Pretendard,
//        lineHeight = 26.sp
//    )
//}
//
//
///**
// * ‚úÖ ÏûÖÎ†•Îêú Î∂ÄÎ∂ÑÎßå Í≤ÄÏ†ïÏÉâ, ÎÇòÎ®∏ÏßÄ ÌöåÏÉâÏúºÎ°ú Î†åÎçîÎßÅ
// */
//@Composable
//fun TypingText(original: String, typed: String) {
//    val annotated: AnnotatedString = buildAnnotatedString {
//        var matchIndex = 0
//        for (i in typed.indices) {
//            if (i < original.length && typed[i] == original[i]) {
//                matchIndex++
//            } else break
//        }
//        append(AnnotatedString(original.take(matchIndex), spanStyle = SpanStyle(color = Color.Black)))
//        append(AnnotatedString(original.drop(matchIndex), spanStyle = SpanStyle(color = Color(0xFF989898))))
//    }
//    Text(annotated, fontSize = 16.sp, fontFamily = Pretendard, lineHeight = 24.sp)
//}
//
///**
// * ‚úÖ ProgressBar (2Îã®Í≥ÑÍπåÏßÄ ÌååÎûÄÏÉâ)
// */
//@Composable
//fun StepProgressBarPreview(totalSteps: Int = 3, currentStep: Int = 2) {
//    Row(
//        Modifier.fillMaxWidth().padding(horizontal = 4.dp),
//        horizontalArrangement = Arrangement.spacedBy(8.dp)
//    ) {
//        repeat(totalSteps) { index ->
//            Box(
//                modifier = Modifier.weight(1f).height(14.dp).background(
//                    color = if (index < currentStep) Color(0xFF195FCF) else Color(0xFFF2F2F2),
//                    shape = RoundedCornerShape(50)
//                )
//            )
//        }
//    }
//}
//
///**
// * ‚úÖ PreviewÏö© ViewModel (collectAsState ÎåÄÏã† mutableStateOf ÏÇ¨Ïö©)
// */
//class StudySecondPreviewViewModel {
//    private val _quote = mutableStateOf("ÏÇ¨Í≥ºÎã§. Ïù¥ Î¨∏Ïû•ÏùÑ ÌïÑÏÇ¨Ìï¥ Î≥¥ÏÑ∏Ïöî.")
//    val quote: State<String> get() = _quote
//
//    private val _userInput = mutableStateOf("ÏÇ¨")
//    val userInput: State<String> get() = _userInput
//
//    fun onUserInputChange(newInput: String) {
//        _userInput.value = newInput
//    }
//}
//
//
///**
// * ‚úÖ Preview
// */
//@Preview(showBackground = true, backgroundColor = 0xFFFFFFFF)
//@Composable
//fun PreviewStudySecondScreen() {
//    val fakeQuote = "ÏÇ¨Í≥ºÎã§. Ïù¥ Î¨∏Ïû•ÏùÑ ÌïÑÏÇ¨Ìï¥ Î≥¥ÏÑ∏Ïöî."
//    val fakeInput = remember { mutableStateOf("ÏÇ¨") }
//
//    Column(
//        Modifier.fillMaxSize()
//            .background(Color.White)
//            .padding(16.dp)
//    ) {
//        TopBar(title = "Ïò§ÎäòÏùò ÌïôÏäµ", onBackClick = {})
//
//        Spacer(Modifier.height(24.dp))
//        Text("ÌïôÏäµ ÏßÑÌñâÎ•†", fontSize = 16.sp, color = Color.Black, modifier = Modifier.padding(start = 8.dp))
//        Spacer(Modifier.height(16.dp))
//        StepProgressBarPreview(totalSteps = 3, currentStep = 2)
//        Spacer(Modifier.height(24.dp))
//
//        // ‚úÖ Ïã§Ï†ú UI Íµ¨Ï°∞ÏôÄ ÎèôÏùºÌïòÍ≤å PreviewÏóêÏÑúÎèÑ ÏÇ¨Ïö©
//        Surface(
//            shape = RoundedCornerShape(12.dp),
//            color = Color(0xFFF9F9F9),
//            modifier = Modifier.weight(1f)
//        ) {
//            Box(
//                modifier = Modifier
//                    .fillMaxSize()
//                    .padding(20.dp)
//            ) {
//                TypingTextOverlay(original = fakeQuote, typed = fakeInput.value)
//
//                BasicTextField(
//                    value = fakeInput.value,
//                    onValueChange = { newValue ->
//                        if (newValue.length <= fakeQuote.length) fakeInput.value = newValue
//                    },
//                    textStyle = LocalTextStyle.current.copy(color = Color.Transparent),
//                    cursorBrush = SolidColor(Color.Transparent),
//                    modifier = Modifier.matchParentSize()
//                )
//            }
//        }
//
//        Spacer(Modifier.height(16.dp))
//        BottomNavigationButtons(onBackClick = {}, onNextClick = {})
//    }
//}
//@Composable
//fun TopBar(title: String, onBackClick: () -> Unit) {
//    Row(
//        modifier = Modifier.fillMaxWidth(),
//        verticalAlignment = Alignment.CenterVertically
//    ) {
//        IconButton(onClick = onBackClick) {
//            Icon(
//                painter = painterResource(id = R.drawable.btn_img_back),
//                contentDescription = "Îí§Î°úÍ∞ÄÍ∏∞",
//                tint = Color.Unspecified
//            )
//        }
//        Text(
//            text = title,
//            fontSize = 20.sp,
//            fontFamily = Pretendard,
//            fontWeight = FontWeight.SemiBold,
//            textAlign = TextAlign.Center,
//            modifier = Modifier.weight(1f),
//            color = Color.Black
//        )
//        Spacer(Modifier.width(48.dp))
//    }
//}
//
//@Composable
//fun BottomNavigationButtons(
//    onBackClick: () -> Unit,
//    onNextClick: () -> Unit
//) {
//    Row(
//        Modifier.fillMaxWidth(),
//        horizontalArrangement = Arrangement.SpaceBetween
//    ) {
//        OutlinedButton(
//            onClick = onBackClick,
//            shape = RoundedCornerShape(50),
//            colors = ButtonDefaults.outlinedButtonColors(contentColor = Color(0xFF195FCF)),
//            modifier = Modifier.height(42.dp).width(160.dp)
//        ) {
//            Text("Ïù¥Ï†Ñ Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard)
//        }
//
//        Button(
//            onClick = onNextClick,
//            colors = ButtonDefaults.buttonColors(containerColor = Color(0xFF195FCF)),
//            shape = RoundedCornerShape(50),
//            modifier = Modifier.height(42.dp).width(160.dp)
//        ) {
//            Text("Îã§Ïùå Îã®Í≥Ñ", fontSize = 16.sp, fontFamily = Pretendard, color = Color.White)
//        }
//    }
//}
///**
// * ‚úÖ PreviewÏóêÏÑú collectAsState()Î•º ÌùâÎÇ¥ ÎÇ¥Í∏∞ ÏúÑÌïú Stub
// */
//open class StudySecondViewModelStub(private val previewVM: StudySecondPreviewViewModel) {
//    val quote: State<String> get() = previewVM.quote
//    val userInput: State<String> get() = previewVM.userInput
//    fun onUserInputChange(newInput: String) = previewVM.onUserInputChange(newInput)
//}}
